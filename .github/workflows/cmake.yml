name: CMake

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Cache sfml
      uses: actions/cache@v1.0.3
      id: cache-sfml
      with:
        path: sfml
        key: libsfml-dev

    - name: Install sfml
      env:
        CACHE_HIT: ${{steps.cache-sfml.outputs.cache-hit}}
      run: |
#        if [[ "$CACHE_HIT" == 'true' ]]; then
#          sudo cp --force --recursive ~/sfml/* /
#        else
          sudo apt update && sudo apt install -yq libsfml-dev libsfml-system libsfml-window libsfml-graphics;
          mkdir -p ~/sfml
          for dep in libsfml-dev; do
            dpkg -L $dep | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/sfml/
          done
#        fi
    
    - name: Store SFML
      uses: actions/upload-artifact@v2
      with:
        name: sfml
        path: |
          sfml

    - name: Install MinGW
      uses: egor-tensin/setup-mingw@v2

    - name: Set up MinGW
      uses: egor-tensin/setup-mingw@v2
      with:
        platform: x86

    - name: mkdir bin
      run: mkdir bin

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/bin -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_CXX_COMPILER=i686-w64-mingw32-g++

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/bin --config ${{env.BUILD_TYPE}} -DCMAKE_CXX_COMPILER=i686-w64-mingw32-g++

    - name: Store Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: spacegame
        path: |
          bin

#    - name: Test
#      working-directory: ${{github.workspace}}/bin
#      # Execute tests defined by the CMake configuration.  
#      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#      run: ctest -C ${{env.BUILD_TYPE}}
      
